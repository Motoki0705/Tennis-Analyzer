---
description:
globs:
alwaysApply: false
---
# PyTest実装のベストプラクティス

## 1. 基本構造と設計原則

### 1.1 テストファイルの構成
- テストファイルは `tests/` ディレクトリ配下に配置し、テスト対象のモジュールと同様の階層構造を維持する
- ファイル名は `test_*.py` の形式で命名する
- 各テストファイルは単一の機能や責務に集中する

### 1.2 テスト関数の命名規則
```python
def test_機能名_テスト条件():
    # テスト内容
```

### 1.3 テストの分類
- **単体テスト**: 個々の関数やクラスの動作を検証
- **統合テスト**: 複数のコンポーネントの連携を検証
- **I/Oテスト**: データの入出力形式や変換を検証（例：`test_dataset_io.py`）

## 2. Hydraを活用した設定管理とテスト

### 2.1 テスト用設定ファイルの作成
```yaml
# @package _global_

defaults:
  - override hydra/job_logging: disabled
  - _self_

# テスト用設定
component:
  _target_: path.to.component.Class
  param1: value1
  param2: value2
```

### 2.2 動的な設定の上書き
```python
# hydra設定の上書き（YAMLを直接書き換えずに動的に調整）
overrides = [
    f"component.param1={value1}",
    f"component.param2={value2}",
]

with initialize(version_base="1.3", config_path="../../configs/test/path", job_name="test_job"):
    cfg = compose(config_name="config_file.yaml", overrides=overrides)
    
    # 設定からコンポーネントをインスタンス化
    component = instantiate(cfg.component)
```

### 2.3 テスト用設定のポイント
- バッチサイズを小さく設定（`batch_size: 2`）
- ワーカー数を最小化（`num_workers: 0`）
- 本番データの一部または専用のテストデータを使用

## 3. パラメータ化テスト

### 3.1 基本的なパラメータ化
```python
# テストパラメータの候補
PARAM_VALUES = [value1, value2, value3]

@pytest.mark.parametrize("param_name", PARAM_VALUES)
def test_function(param_name):
    # テスト内容
```

### 3.2 複数パラメータの組み合わせテスト
```python
# テストパラメータの候補
PARAM1_VALUES = ["a", "b"]
PARAM2_VALUES = [1, 2]

@pytest.mark.parametrize("param1", PARAM1_VALUES)
@pytest.mark.parametrize("param2", PARAM2_VALUES)
def test_function(param1, param2):
    # 全ての組み合わせでテストが実行される
    # (a,1), (a,2), (b,1), (b,2)
```

### 3.3 パラメータ名と意味の明確化
```python
# テストパラメータの候補と説明
INPUT_TYPES = ["cat", "stack"]         # 連結 or スタック
OUTPUT_TYPES = ["last", "all"]         # 最後のフレームのみ or 全フレーム
```

## 4. アサーションと検証

### 4.1 基本的なアサーション
```python
assert condition, "エラーメッセージ"
```

### 4.2 例外のテスト
```python
with pytest.raises(ExpectedException):
    # 例外が発生するコード
```

### 4.3 形状と値の検証
```python
# テンソル形状の検証
assert tensor.dim() == 4
assert tensor.shape == (batch_size, channels, height, width)

# 値の範囲検証
assert torch.all(tensor >= 0) and torch.all(tensor <= 1)

# 近似値の検証
assert torch.isclose(value, expected, atol=0.1)
```

### 4.4 段階的な検証
```python
# 1. インスタンス化の検証
try:
    component = instantiate(cfg.component)
except Exception as e:
    pytest.fail(f"インスタンス化に失敗: {e}")

# 2. メソッド呼び出しの検証
try:
    result = component.method()
except Exception as e:
    pytest.fail(f"メソッド呼び出しに失敗: {e}")

# 3. 結果の検証
assert result.shape == expected_shape
```

## 5. テストの実行と管理

### 5.1 テストの実行方法
```bash
# 全テストの実行
pytest

# 特定のテストファイルの実行
pytest tests/path/test_file.py

# 詳細出力
pytest -v

# 特定のテストのみ実行
pytest -k "test_name"
```

### 5.2 テストの直接実行
```python
if __name__ == "__main__":
    pytest.main(["-v", __file__])
```

### 5.3 テスト実行の高速化
- `pytest-xdist`: 並列実行
- スコープを絞ったテスト実行
- 重いテストには `@pytest.mark.slow` などのマーカーを付与

## 6. テストコードの例: DataModule I/Oテスト

### 6.1 テスト設定ファイル (config_dataset_test.yaml)
```yaml
# @package _global_

defaults:
  - override hydra/job_logging: disabled
  - _self_

# テスト用設定
litdatamodule:
  _target_: src.path.to.DataModule
  batch_size: 2  # テストなので小さく
  num_workers: 0  # テストなので0
  # その他の必要なパラメータ
```

### 6.2 テスト実装 (test_dataset_io.py)
```python
@pytest.mark.parametrize("param1", VALUES1)
@pytest.mark.parametrize("param2", VALUES2)
def test_dataset_io(param1, param2):
    """テストの目的と検証内容の説明"""
    
    # 1. 設定の準備
    overrides = [f"litdatamodule.param1={param1}", f"litdatamodule.param2={param2}"]
    
    # 2. Hydraによる設定読み込みとインスタンス化
    with initialize(...):
        cfg = compose(...)
        datamodule = instantiate(cfg.litdatamodule)
        
    # 3. データの取得
    batch = next(iter(datamodule.train_dataloader()))
    
    # 4. データ形状の検証
    assert batch[0].shape == expected_shape
    
    # 5. データ内容の検証
    assert torch.all(batch[0] >= 0)
```

## 7. まとめ

### 良いテストの特徴
1. **独立性**: 他のテストに依存しない
2. **再現性**: 何度実行しても同じ結果
3. **明確性**: テストの目的と検証内容が明確
4. **効率性**: 実行時間が短く、リソース消費が少ない
5. **網羅性**: エッジケースを含む様々な条件をカバー

### テスト実装のワークフロー
1. テスト対象の機能を特定
2. テストケース（入力と期待値）を設計
3. テスト用の設定ファイルを作成
4. パラメータ化テストを実装
5. 段階的な検証ロジックを実装
6. テストを実行して結果を確認
7. 必要に応じてテストを改善
