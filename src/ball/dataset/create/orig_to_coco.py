import csv
import json
import re
from datetime import datetime
from pathlib import Path

from PIL import Image  # Pillow ライブラリ

# --- 設定 ---
DATASET_ROOT = Path("data/images/")  # データセットのルートディレクトリ
CSV_FILENAME = "Label.csv"  # 各Clipフォルダ内のCSVファイル名 (適宜変更)
OUTPUT_JSON = "coco_annotations.json"  # 出力するJSONファイル名
BBOX_SIZE = 224  # バウンディングボックスの目標サイズ (幅・高さ)

# --- COCO 基本構造 ---
coco_output = {
    "info": {
        "description": "Ball Tracking and Event Dataset from CSVs",
        "version": "1.0",
        "year": datetime.now().year,
        "contributor": "Generated by script",
        "date_created": datetime.now().isoformat(),
    },
    "licenses": [{"id": 1, "name": "Placeholder License", "url": ""}],
    "images": [],
    "categories": [
        {
            "id": 1,
            "name": "ball",
            "supercategory": "sports",
            "keypoints": ["center"],
            "skeleton": [],
        }
    ],
    "annotations": [],
}

# --- IDカウンターと画像管理 ---
image_id_counter = 1
annotation_id_counter = 1
image_path_to_id = {}  # 画像の original_path と割り当てた image_id を管理


# --- メイン処理 ---
def convert_csvs_to_coco(dataset_root, csv_filename, output_json):
    global image_id_counter, annotation_id_counter, image_path_to_id, coco_output

    print("Starting conversion process...")
    print(f"Searching for '{csv_filename}' in subdirectories of '{dataset_root}'...")

    csv_files_found = list(dataset_root.rglob(f"game*/Clip*/{csv_filename}"))
    print(f"Found {len(csv_files_found)} CSV files.")

    if not csv_files_found:
        print("Error: No CSV files found matching the pattern.")
        return

    def get_sort_key(path: Path):
        """パスから (game_id, clip_id) のタプルを数値で返す"""
        try:
            clip_dir = path.parent
            game_dir = clip_dir.parent
            game_match = re.search(r"game(\d+)", game_dir.name, re.IGNORECASE)
            clip_match = re.search(r"Clip(\d+)", clip_dir.name, re.IGNORECASE)
            if game_match and clip_match:
                # 数値に変換してタプルで返す (game_id, clip_id)
                return (int(game_match.group(1)), int(clip_match.group(1)))
            else:
                # パターンにマッチしない場合はソート順を最後に持っていく
                print(f"  Debug: Could not extract sort key from {path}")  # デバッグ用
                return (float("inf"), float("inf"))
        except Exception as e:
            print(f"  Debug: Error extracting sort key from {path}: {e}")  # デバッグ用
            # エラーの場合もソート順を最後に持っていく
            return (float("inf"), float("inf"))

    print("Sorting CSV files by game and clip ID (natural order)...")
    csv_files_found.sort(key=get_sort_key)
    print("Sorting complete.")
    # オプション: ソート結果の確認（最初のいくつかを表示）
    # print("First few sorted files:")
    # for p in csv_files_found[:5]:
    #     print(f"  - {p}")

    for csv_path in csv_files_found:  # ソート済みのリストを使う
        print(f"Processing: {csv_path}")

        # --- パスから game_id と clip_id を抽出 (pathlib を使用 & 大文字/小文字無視) ---
        # (この部分は以前の修正で変更済みのはずなので、そのまま)
        try:
            clip_dir = csv_path.parent
            game_dir = clip_dir.parent
            game_match = re.search(r"game(\d+)", game_dir.name, re.IGNORECASE)
            clip_match = re.search(r"Clip(\d+)", clip_dir.name, re.IGNORECASE)

            if not game_match or not clip_match:
                print(
                    f"  Warning: Could not extract game/clip ID from path structure near: {csv_path}. Expected 'gameX/ClipY' format in directory names. Skipping."
                )
                continue
            game_id = int(game_match.group(1))
            clip_id = int(clip_match.group(1))
        except Exception as e:
            print(
                f"  Warning: Error extracting game/clip ID from path {csv_path}: {e}. Skipping."
            )
            continue

        # --- CSV読み込み ---
        try:
            with open(csv_path, mode="r", encoding="utf-8") as infile:
                reader = csv.DictReader(infile)
                rows = list(reader)  # 一旦リストに読み込む
        except FileNotFoundError:
            print(f"  Error: CSV file not found at {csv_path}. Skipping.")
            continue
        except Exception as e:
            print(f"  Error reading CSV file {csv_path}: {e}. Skipping.")
            continue

        # --- CSV行処理 ---
        for i, row in enumerate(rows):
            try:
                # --- 必須列の存在チェックと値の取得 ---
                if not all(
                    k in row
                    for k in [
                        "file name",
                        "visibility",
                        "x-coordinate",
                        "y-coordinate",
                        "status",
                    ]
                ):
                    print(
                        f"  Warning: Row {i+1} in {csv_path} is missing required columns. Skipping row."
                    )
                    continue

                file_name = row["file name"].strip()
                visibility_str = row["visibility"].strip()
                x_str = row["x-coordinate"].strip()
                y_str = row["y-coordinate"].strip()
                status_str = row["status"].strip()

                # --- visibility=0 はスキップ ---
                if not visibility_str or int(visibility_str) == 0:
                    continue  # 見えないオブジェクトのアノテーションは作成しない

                # --- 座標とステータスの値チェックと変換 ---
                if not x_str or not y_str or not status_str:
                    print(
                        f"  Warning: Row {i+1} in {csv_path} (file: {file_name}) has empty coordinates or status for a visible object. Skipping row."
                    )
                    continue

                visibility = int(visibility_str)
                x = float(x_str)
                y = float(y_str)
                status = int(status_str)  # イベントステータス

                # --- 画像パス構築 ---
                # original_path は gameX/ClipY/filename.jpg 形式
                original_path_str = f"game{game_id}/Clip{clip_id}/{file_name}"
                # 実際の画像ファイルへのフルパス
                image_full_path = dataset_root / original_path_str

                # --- 画像情報の処理 (まだ登録されていなければ) ---
                if original_path_str not in image_path_to_id:
                    try:
                        with Image.open(image_full_path) as img:
                            width, height = img.size

                        current_image_id = image_id_counter
                        image_info = {
                            "id": current_image_id,
                            "file_name": file_name,
                            "original_path": original_path_str,  # gameX/clipY/0000.jpg 形式
                            "width": width,
                            "height": height,
                            "license": 1,
                            "game_id": game_id,
                            "clip_id": clip_id,
                        }
                        coco_output["images"].append(image_info)
                        image_path_to_id[original_path_str] = {
                            "id": current_image_id,
                            "width": width,
                            "height": height,
                        }
                        image_id_counter += 1
                        # print(f"  Added image: {original_path_str} (ID: {current_image_id})") # 詳細ログ

                    except FileNotFoundError:
                        print(
                            f"  Warning: Image file not found at {image_full_path} (referenced in {csv_path}, row {i+1}). Skipping annotation."
                        )
                        continue  # 画像がない場合はアノテーションも追加できない
                    except Exception as e:
                        print(
                            f"  Warning: Error opening or reading image {image_full_path}: {e}. Skipping annotation."
                        )
                        continue

                # --- アノテーション情報の作成 ---
                image_data = image_path_to_id[original_path_str]
                current_image_id = image_data["id"]
                img_w = image_data["width"]
                img_h = image_data["height"]

                # --- COCO 可視性フラグのマッピング ---
                # CSV visibility=1 (Visible)   -> COCO v=2
                # CSV visibility=2 (Partial)  -> COCO v=1
                # CSV visibility=3 (Heavy)    -> COCO v=1
                coco_visibility = 2 if visibility == 1 else 1

                # --- キーポイントデータ ---
                keypoints = [x, y, coco_visibility]

                # --- バウンディングボックス計算 (クリッピング考慮) ---
                half_size = BBOX_SIZE / 2.0
                x_tl = x - half_size
                y_tl = y - half_size

                # クリッピング
                clipped_x_tl = max(0.0, x_tl)
                clipped_y_tl = max(0.0, y_tl)
                clipped_x_br = min(float(img_w), x_tl + BBOX_SIZE)
                clipped_y_br = min(float(img_h), y_tl + BBOX_SIZE)

                clipped_w = clipped_x_br - clipped_x_tl
                clipped_h = clipped_y_br - clipped_y_tl

                # 幅や高さが0以下になるケースは稀だが念のためチェック
                if clipped_w <= 0 or clipped_h <= 0:
                    print(
                        f"  Warning: Calculated bounding box has zero or negative size for {original_path_str} at ({x},{y}). Skipping annotation."
                    )
                    continue

                bbox = [clipped_x_tl, clipped_y_tl, clipped_w, clipped_h]
                area = clipped_w * clipped_h

                # --- アノテーション辞書作成 ---
                annotation_info = {
                    "id": annotation_id_counter,
                    "image_id": current_image_id,
                    "category_id": 1,  # ボールのカテゴリID
                    "iscrowd": 0,
                    "keypoints": keypoints,
                    "num_keypoints": 1,  # v=1 or v=2 のキーポイント数
                    "bbox": bbox,
                    "area": area,
                    "event_status": status,  # CSVのstatus値をそのまま格納
                }
                coco_output["annotations"].append(annotation_info)
                annotation_id_counter += 1

            except ValueError as e:
                print(
                    f"  Warning: Invalid numeric value in row {i+1} of {csv_path} (file: {file_name}): {e}. Skipping row."
                )
            except Exception as e:
                print(
                    f"  Error processing row {i+1} in {csv_path} (file: {file_name}): {e}. Skipping row."
                )

    # --- 結果の保存 ---
    coco_output["info"]["date_created"] = datetime.now().isoformat()  # 最終更新日時
    print("\nConversion complete.")
    print(f"Total images processed: {len(coco_output['images'])}")
    print(f"Total annotations created: {len(coco_output['annotations'])}")

    try:
        with open(output_json, "w", encoding="utf-8") as outfile:
            json.dump(coco_output, outfile, indent=4)
        print(f"Successfully saved COCO JSON to: {output_json}")
    except Exception as e:
        print(f"Error saving JSON file {output_json}: {e}")


# --- スクリプト実行 ---
if __name__ == "__main__":
    convert_csvs_to_coco(DATASET_ROOT, CSV_FILENAME, OUTPUT_JSON)
