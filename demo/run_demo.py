#!/usr/bin/env python3
"""
Tennis Analysis Demo Launcher
============================

üéæ „ÉÜ„Éã„ÇπËß£Êûê„Éá„É¢Ëµ∑Âãï„Çπ„ÇØ„É™„Éó„Éà

„Åì„ÅÆ„Çπ„ÇØ„É™„Éó„Éà„ÅØ„ÄÅÂà©Áî®ÂèØËÉΩ„Å™„Éá„É¢„Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥„ÇíÁ¢∫Ë™ç„Åó„ÄÅ
ÈÅ©Âàá„Å™„Éá„É¢„ÇíËµ∑Âãï„Åô„Çã„Åü„ÇÅ„ÅÆ„É©„É≥„ÉÅ„É£„Éº„Åß„Åô„ÄÇ

Available Demos:
- tennis_analysis_app.py: Áµ±ÂêàÂûã„Éï„É´Ê©üËÉΩ„Ç¢„Éó„É™
- simple_demo.py: „Ç∑„É≥„Éó„É´ËªΩÈáèÁâà
- Legacy demos: ball.py, court.py, player.pyÁ≠â

Usage:
    python demo/run_demo.py [demo_name] [options]

Examples:
    python demo/run_demo.py                    # „Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„ÉñÈÅ∏Êäû
    python demo/run_demo.py simple             # „Ç∑„É≥„Éó„É´„Éá„É¢
    python demo/run_demo.py full               # „Éï„É´Ê©üËÉΩ„Éá„É¢
    python demo/run_demo.py ball               # „Éú„Éº„É´Ê§úÂá∫„ÅÆ„Åø
"""

import argparse
import os
import sys
import subprocess
from pathlib import Path
from typing import Dict, List, Optional

# „Éó„É≠„Ç∏„Çß„ÇØ„Éà„É´„Éº„Éà„ÇíPython„Éë„Çπ„Å´ËøΩÂä†
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

# Âà©Áî®ÂèØËÉΩ„Å™„Éá„É¢‰∏ÄË¶ß
AVAILABLE_DEMOS = {
    "simple": {
        "file": "simple_demo.py",
        "name": "Simple Tennis Ball Detector",
        "description": "ËªΩÈáè„Åß‰Ωø„ÅÑ„ÇÑ„Åô„ÅÑ„Éú„Éº„É´Ê§úÂá∫„Éá„É¢",
        "features": ["üöÄ „ÉØ„É≥„ÇØ„É™„ÉÉ„ÇØËß£Êûê", "üì± „É¢„Éê„Ç§„É´ÂØæÂøú", "‚ö° È´òÈÄüÂá¶ÁêÜ"],
        "port": 7861
    },
    "full": {
        "file": "tennis_analysis_app.py", 
        "name": "Tennis Analysis System",
        "description": "Áµ±ÂêàÂûã„Éï„É´Ê©üËÉΩ„ÉÜ„Éã„ÇπËß£Êûê„Ç∑„Çπ„ÉÜ„É†",
        "features": ["üéØ „Éú„Éº„É´Ê§úÂá∫", "üìÅ „Éê„ÉÉ„ÉÅÂá¶ÁêÜ", "üìä Áµ±Ë®àÂàÜÊûê", "‚öôÔ∏è Ë©≥Á¥∞Ë®≠ÂÆö"],
        "port": 7860
    },
    "ball": {
        "file": "ball.py",
        "name": "Ball Detection Demo",
        "description": "„É¨„Ç¨„Ç∑„ÉºÁâà„Éú„Éº„É´Ê§úÂá∫„Éá„É¢",
        "features": ["üéæ „Éú„Éº„É´Ê§úÂá∫", "üìà ËªåË∑°ËøΩË∑°", "üîß Áï∞Â∏∏ÂÄ§Èô§Âéª"],
        "port": 7862
    },
    "court": {
        "file": "court.py",
        "name": "Court Detection Demo", 
        "description": "„Ç≥„Éº„ÉàÊ§úÂá∫„Éª„Ç≠„Éº„Éù„Ç§„É≥„ÉàËß£Êûê",
        "features": ["üèüÔ∏è „Ç≥„Éº„ÉàË™çË≠ò", "üìç „Ç≠„Éº„Éù„Ç§„É≥„ÉàÊ§úÂá∫", "üé® „Éí„Éº„Éà„Éû„ÉÉ„Éó"],
        "port": 7863
    },
    "player": {
        "file": "player.py",
        "name": "Player Detection Demo",
        "description": "„Éó„É¨„Éº„É§„ÉºÊ§úÂá∫„ÉªÂßøÂã¢Êé®ÂÆö",
        "features": ["üë• „Éó„É¨„Éº„É§„ÉºÊ§úÂá∫", "ü§∏ ÂßøÂã¢Êé®ÂÆö", "üìä Âãï‰ΩúËß£Êûê"],
        "port": 7864
    }
}

def check_dependencies() -> Dict[str, bool]:
    """‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ"""
    dependencies = {}
    
    try:
        import torch
        dependencies["torch"] = True
    except ImportError:
        dependencies["torch"] = False
    
    try:
        import gradio
        dependencies["gradio"] = True
    except ImportError:
        dependencies["gradio"] = False
    
    try:
        import cv2
        dependencies["cv2"] = True
    except ImportError:
        dependencies["cv2"] = False
    
    try:
        from src.predictor import VideoPipeline
        dependencies["predictor"] = True
    except ImportError:
        dependencies["predictor"] = False
    
    return dependencies

def check_model_files() -> Dict[str, List[str]]:
    """„É¢„Éá„É´„Éï„Ç°„Ç§„É´Â≠òÂú®Á¢∫Ë™ç"""
    model_info = {"ball": [], "court": [], "player": []}
    
    # checkpoints„Éá„Ç£„É¨„ÇØ„Éà„É™Ê§úÁ¥¢
    checkpoints_dir = Path("checkpoints")
    if checkpoints_dir.exists():
        for category in model_info.keys():
            category_dir = checkpoints_dir / category
            if category_dir.exists():
                for ext in ["*.ckpt", "*.pth"]:
                    model_info[category].extend([str(p) for p in category_dir.glob(ext)])
    
    return model_info

def print_system_status():
    """„Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖãË°®Á§∫"""
    print("üéæ" + "="*50)
    print("   Tennis Analysis Demo System")
    print("="*52)
    print()
    
    # ‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
    print("üì¶ Dependencies:")
    deps = check_dependencies()
    for dep, available in deps.items():
        status = "‚úÖ" if available else "‚ùå"
        print(f"  {status} {dep}")
    print()
    
    # GPUÊÉÖÂ†±
    try:
        import torch
        print("üíª System Info:")
        print(f"  Device: {'CUDA' if torch.cuda.is_available() else 'CPU'}")
        if torch.cuda.is_available():
            print(f"  GPU: {torch.cuda.get_device_name(0)}")
            print(f"  CUDA Version: {torch.version.cuda}")
    except:
        pass
    print()
    
    # „É¢„Éá„É´„Éï„Ç°„Ç§„É´Á¢∫Ë™ç
    print("ü§ñ Available Models:")
    models = check_model_files()
    for category, files in models.items():
        count = len(files)
        status = "‚úÖ" if count > 0 else "‚ùå"
        print(f"  {status} {category.capitalize()}: {count} files")
    print()

def print_demo_list():
    """Âà©Áî®ÂèØËÉΩ„Éá„É¢‰∏ÄË¶ßË°®Á§∫"""
    print("üéÆ Available Demos:")
    print()
    
    for key, demo in AVAILABLE_DEMOS.items():
        file_exists = os.path.exists(Path(__file__).parent / demo["file"])
        status = "‚úÖ" if file_exists else "‚ùå"
        
        print(f"{status} [{key}] {demo['name']}")
        print(f"    üìù {demo['description']}")
        print(f"    üåê Port: {demo['port']}")
        print(f"    ‚ú® Features: {', '.join(demo['features'])}")
        print()

def interactive_selection() -> Optional[str]:
    """„Ç§„É≥„Çø„É©„ÇØ„ÉÜ„Ç£„Éñ„Éá„É¢ÈÅ∏Êäû"""
    print("üéØ Select a demo to launch:")
    print()
    
    valid_options = []
    for key, demo in AVAILABLE_DEMOS.items():
        if os.path.exists(Path(__file__).parent / demo["file"]):
            valid_options.append(key)
            print(f"  {len(valid_options)}. [{key}] {demo['name']}")
    
    if not valid_options:
        print("‚ùå No demo files found!")
        return None
    
    print(f"  {len(valid_options) + 1}. Exit")
    print()
    
    while True:
        try:
            choice = input("Enter your choice (1-{}): ".format(len(valid_options) + 1))
            choice_num = int(choice)
            
            if choice_num == len(valid_options) + 1:
                return None
            elif 1 <= choice_num <= len(valid_options):
                return valid_options[choice_num - 1]
            else:
                print(f"‚ùå Invalid choice. Please enter 1-{len(valid_options) + 1}")
        except ValueError:
            print("‚ùå Please enter a valid number")
        except KeyboardInterrupt:
            print("\nüëã Goodbye!")
            return None

def launch_demo(demo_key: str, share: bool = False, debug: bool = False):
    """„Éá„É¢Ëµ∑Âãï"""
    if demo_key not in AVAILABLE_DEMOS:
        print(f"‚ùå Unknown demo: {demo_key}")
        return False
    
    demo = AVAILABLE_DEMOS[demo_key]
    demo_file = Path(__file__).parent / demo["file"]
    
    if not demo_file.exists():
        print(f"‚ùå Demo file not found: {demo_file}")
        return False
    
    print(f"üöÄ Launching {demo['name']}...")
    print(f"üìÅ File: {demo['file']}")
    print(f"üåê URL: http://localhost:{demo['port']}")
    print()
    print("üí° Press Ctrl+C to stop the demo")
    print("-" * 50)
    
    try:
        # Áí∞Â¢ÉÂ§âÊï∞Ë®≠ÂÆö
        env = os.environ.copy()
        if share:
            env["GRADIO_SHARE"] = "1"
        if debug:
            env["GRADIO_DEBUG"] = "1"
        
        # „Éá„É¢ÂÆüË°å
        subprocess.run([
            sys.executable, str(demo_file)
        ], env=env, cwd=project_root)
        
        return True
        
    except KeyboardInterrupt:
        print("\nüõë Demo stopped by user")
        return True
    except Exception as e:
        print(f"‚ùå Error launching demo: {e}")
        return False

def main():
    """„É°„Ç§„É≥„Ç®„É≥„Éà„É™„Éù„Ç§„É≥„Éà"""
    parser = argparse.ArgumentParser(
        description="Tennis Analysis Demo Launcher",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__
    )
    
    parser.add_argument(
        "demo", nargs="?",
        choices=list(AVAILABLE_DEMOS.keys()),
        help="Demo to launch (interactive selection if not specified)"
    )
    
    parser.add_argument(
        "--list", action="store_true",
        help="List available demos and exit"
    )
    
    parser.add_argument(
        "--status", action="store_true", 
        help="Show system status and exit"
    )
    
    parser.add_argument(
        "--share", action="store_true",
        help="Create shareable Gradio link"
    )
    
    parser.add_argument(
        "--debug", action="store_true",
        help="Enable debug mode"
    )
    
    args = parser.parse_args()
    
    # „Ç∑„Çπ„ÉÜ„É†Áä∂ÊÖãË°®Á§∫
    if args.status or args.list or not args.demo:
        print_system_status()
    
    # „Éá„É¢‰∏ÄË¶ßË°®Á§∫
    if args.list:
        print_demo_list()
        return
    
    if args.status:
        return
    
    # „Éá„É¢ÈÅ∏Êäû„ÉªËµ∑Âãï
    demo_key = args.demo
    if not demo_key:
        demo_key = interactive_selection()
    
    if demo_key:
        success = launch_demo(demo_key, args.share, args.debug)
        if not success:
            sys.exit(1)
    else:
        print("üëã No demo selected. Goodbye!")

if __name__ == "__main__":
    main() 